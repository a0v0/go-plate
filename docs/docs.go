// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://www.go_plate.com/support",
            "email": "developers@go_plate.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/session/refresh": {
            "post": {
                "description": "Refreshes supertoken's passwordless session",
                "tags": [
                    "Auth/Passwordless"
                ],
                "summary": "Refresh Session",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/auth/signinup/code": {
            "post": {
                "description": "Send a signup code to the user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth/Passwordless"
                ],
                "summary": "Signup Code Request",
                "parameters": [
                    {
                        "description": "email",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/supertokens.SignupCodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/supertokens.SignupCodeRequestResponse"
                            }
                        }
                    }
                }
            }
        },
        "/auth/signinup/code/consume": {
            "post": {
                "description": "Consumes a signup code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth/Passwordless"
                ],
                "summary": "Signup Code Consume",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/supertokens.SignupCodeConsume"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/supertokens.SignupCodeConsumeResponse"
                            }
                        }
                    }
                }
            }
        },
        "/auth/signout": {
            "post": {
                "description": "Logout a.k.a revoke supertoken's passwordless session",
                "tags": [
                    "Auth/Passwordless"
                ],
                "summary": "Logout",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/notify": {
            "post": {
                "description": "After registering a new user at supertokens, the client must inform the server about the new user, so that server can issue an account for the user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "summary": "Notify server about new user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/request.GetSelfAccountResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        },
        "/user/account": {
            "get": {
                "description": "Returns account information of the currently logged in user",
                "tags": [
                    "Account"
                ],
                "summary": "Get Self Account",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "403": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            },
            "post": {
                "description": "Update the  profile of currently logged in user\nAll the fields are required to be specified, even if you don't want to update them.\nIf you want to unset a field, set it to the null value depending on the field type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "Update Self Profile",
                "parameters": [
                    {
                        "description": "body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.AccountUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    },
                    "401": {
                        "description": "Error",
                        "schema": {
                            "$ref": "#/definitions/response.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.AccountUpdateRequest": {
            "type": "object",
            "properties": {
                "bio": {
                    "description": "The bio associated with this account.",
                    "type": "string"
                },
                "display_name": {
                    "description": "The display name associated with this account.",
                    "type": "string"
                },
                "username": {
                    "description": "The username associated with this account.",
                    "type": "string"
                }
            }
        },
        "request.GetSelfAccountResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "The ID of the account",
                    "type": "string"
                },
                "profile": {
                    "description": "The profile of the account",
                    "allOf": [
                        {
                            "$ref": "#/definitions/request.Profile"
                        }
                    ]
                },
                "user_id": {
                    "description": "The ID of the user",
                    "type": "string"
                }
            }
        },
        "request.Profile": {
            "type": "object",
            "properties": {
                "bio": {
                    "description": "The Bio associated with this account.",
                    "type": "string"
                },
                "create_time": {
                    "description": "Time when the account was created.",
                    "type": "string"
                },
                "display_name": {
                    "description": "The Display Names associated with this account.",
                    "type": "string"
                },
                "id": {
                    "description": "The Profile ID.",
                    "type": "string"
                },
                "lang_tag": {
                    "description": "Language associated with this account. This is a BCP-47 language tag.",
                    "type": "string"
                },
                "location": {
                    "description": "Location associated with this account.",
                    "type": "string"
                },
                "timezone": {
                    "description": "Timezone associated with this account.",
                    "type": "string"
                },
                "update_time": {
                    "description": "Time when the profile was last updated.",
                    "type": "string"
                },
                "username": {
                    "description": "The Usernames associated with this account.",
                    "type": "string"
                }
            }
        },
        "response.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "messages": {
                    "type": "array",
                    "items": {}
                }
            }
        },
        "supertokens.SignupCodeConsume": {
            "type": "object",
            "properties": {
                "deviceId": {
                    "type": "string"
                },
                "flowType": {
                    "type": "string"
                },
                "preAuthSessionId": {
                    "type": "string"
                },
                "userInputCode": {
                    "type": "string"
                }
            }
        },
        "supertokens.SignupCodeConsumeResponse": {
            "type": "object",
            "properties": {
                "createdNewUser": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "email": {
                            "type": "string"
                        },
                        "id": {
                            "type": "string"
                        },
                        "phoneNumber": {
                            "type": "string"
                        },
                        "timejoined": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "supertokens.SignupCodeRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "supertokens.SignupCodeRequestResponse": {
            "type": "object",
            "properties": {
                "deviceId": {
                    "type": "string"
                },
                "flowType": {
                    "type": "string"
                },
                "preAuthSessionId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "go_plate API Specification",
	Description:      "This is the API specification for the go_plate backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
